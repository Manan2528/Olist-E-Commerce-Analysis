use project6;

# BASIC PROBLEMS


# List all cities where customers are located -

select distinct(customer_city) from customers;

# Count the number of orders placed in 2017 -

select count(order_id) from orders
where year(order_purchase_timestamp)=2017;

# Find total sales per category -

SELECT 
    a.product_category,
    ROUND(SUM(c.payment_value), 1) AS Total_Sales
FROM
    products a
        JOIN
    order_items b ON a.product_id = b.product_id
        JOIN
    payments c ON b.order_id = c.order_id
GROUP BY a.product_category
ORDER BY a.product_category;

# Calculate the percentage of orders that were paid in installments -

select
  ROUND(
    (SELECT COUNT(*) FROM payments WHERE payment_installments > 1) * 100.0 / 
    (SELECT COUNT(*) FROM payments), 
  2) AS installment_percentage;
  
# Count the number of customers from each state -

SELECT 
    customer_state, COUNT(customer_id) AS customer_count
FROM
    customers
GROUP BY customer_state
ORDER BY customer_state;



# INTERMEDIATE PROBLEMS



# Calculate the number of orders per month in 2018 -

SELECT 
    MONTH(order_purchase_timestamp) AS months, COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp)
ORDER BY MONTH(order_purchase_timestamp);

# Find the average number of products per order, grouped by customer city -

SELECT 
    c.customer_city,
    ROUND(AVG(product_count), 2) AS avg_products_per_order
FROM (
    SELECT 
        o.order_id,
        COUNT(oi.product_id) AS product_count
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.order_id
) AS order_product_counts
JOIN orders o ON order_product_counts.order_id = o.order_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_city
ORDER BY avg_products_per_order DESC;

# Calculate the percentage of total revenue contributed by each product category -

SELECT 
    a.product_category,
    ROUND(SUM(c.payment_value) * 100.0 / (SELECT 
                    SUM(payment_value)
                FROM
                    payments),
            2) AS percentage
FROM
    products a
        JOIN
    order_items b ON a.product_id = b.product_id
        JOIN
    payments c ON b.order_id = c.order_id
GROUP BY a.product_category
ORDER BY a.product_category;

# Identify the correlation between product price and number of times a product has been purchased -

WITH order_stats AS (
    SELECT 
        order_id,
        AVG(price) AS avg_value,
        COUNT(*) AS count_order
    FROM order_items
    GROUP BY order_id
),
summary AS (
    SELECT 
        COUNT(*) AS n,
        SUM(avg_value) AS sum_x,
        SUM(count_order) AS sum_y,
        SUM(avg_value * count_order) AS sum_xy,
        SUM(avg_value * avg_value) AS sum_x2,
        SUM(count_order * count_order) AS sum_y2
    FROM order_stats
)
SELECT 
    ROUND(
        (sum_xy - (sum_x * sum_y / n)) / 
        SQRT((sum_x2 - (sum_x * sum_x / n)) * (sum_y2 - (sum_y * sum_y / n))),
        4
    ) AS correlation
FROM summary;


# Calculate revenue generated by each seller and rank them by revenue -

select
  o.seller_id,
  ROUND(SUM(o.price + o.freight_value), 2) as Total_Revenue,
  RANK() OVER (ORDER BY ROUND(SUM(o.price + o.freight_value), 2) DESC) as revenue_rank
from order_items o
join sellers s on s.seller_id = o.seller_id
group by o.seller_id;



# ADVANCED PROBLEMS



# Calculate the moving average of order values for each customer over their order history -

SELECT 
    o.customer_id,
    o.order_id,
    o.order_purchase_timestamp,
    ROUND(
        AVG(SUM(p.payment_value)) OVER (
            PARTITION BY o.customer_id 
            ORDER BY o.order_purchase_timestamp
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ), 2
    ) AS cumulative_avg_order_value
FROM orders o
JOIN payments p ON o.order_id = p.order_id
GROUP BY o.customer_id, o.order_id, o.order_purchase_timestamp
ORDER BY o.customer_id, o.order_purchase_timestamp;

# Calculate the cumilative sales per month for each year -

select year(order_purchase_timestamp) as sales_year,
month(order_purchase_timestamp) as sales_month,
round(sum(payment_value),2) as monthly_sales,
round(SUM(SUM(payment_value)) OVER (
        PARTITION BY YEAR(order_purchase_timestamp)
        ORDER BY MONTH(order_purchase_timestamp)
    ), 2) as cumilative_sales
from orders o join payments p on o.order_id=p.order_id
group by year(order_purchase_timestamp), month(order_purchase_timestamp)
order by sales_year, sales_month;

# Calculate the year over year growth rate of total sales -

WITH yearly_sales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS sales_year,
        ROUND(SUM(p.payment_value), 2) AS total_sales
    FROM orders o
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY YEAR(o.order_purchase_timestamp)
)
SELECT 
    curr.sales_year,
    curr.total_sales,
    prev.total_sales AS prev_year_sales,
    ROUND(
        ((curr.total_sales - prev.total_sales) / prev.total_sales) * 100,
        2
    ) AS yoy_growth_percent
FROM yearly_sales curr
LEFT JOIN yearly_sales prev
    ON curr.sales_year = prev.sales_year + 1
ORDER BY curr.sales_year;

# Identify top 3 customers who spent most money in each year -

SELECT *
FROM (
    SELECT 
        c.customer_id,
        YEAR(o.order_purchase_timestamp) AS order_year,
        ROUND(SUM(p.payment_value), 2) AS total_spent,
        RANK() OVER (
            PARTITION BY YEAR(o.order_purchase_timestamp)
            ORDER BY SUM(p.payment_value) DESC
        ) AS rank_order
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY c.customer_id, YEAR(o.order_purchase_timestamp)
) ranked_customers
WHERE rank_order <= 3
ORDER BY order_year, rank_order;

# Calculate the retention rate of customers, defined as the percentage of customers -
# who make another purchase within 6 months of their first purchase

WITH first_orders AS (
    SELECT customer_id, DATE(MIN(order_purchase_timestamp)) AS first_order_date
    FROM orders
    GROUP BY customer_id
),
repeat_orders AS (
    SELECT o.customer_id
    FROM orders o
    JOIN first_orders f ON o.customer_id = f.customer_id
    WHERE DATE(o.order_purchase_timestamp) > f.first_order_date
      AND DATE(o.order_purchase_timestamp) <= DATE_ADD(f.first_order_date, INTERVAL 6 MONTH)
    GROUP BY o.customer_id
)

SELECT 
    ROUND(
        (SELECT COUNT(*) FROM repeat_orders) * 100.0 / COUNT(*), 
        2
    ) AS retention_rate_percentage
FROM first_orders;

